!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);const i=document.querySelector(".gamefield");class r{constructor(e,t){this.number=e,this.picture=t,this.url=null,this.arr=null,this.value=null,this.current=null,this.count=0,this.point=e,this.size=null}choice(){switch(this.picture){case 1:this.url="one-skirt";break;case 2:this.url="two-skirt";break;case 3:this.url="three-skirt"}switch(this.arr=[1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12],this.number){case 10:this.size="big";break;case 18:this.size="medium";break;case 24:this.size="small"}}build(){let e=this.number;for(;e>0;){let t=Math.round(Math.random()*(e-1));i.innerHTML+=`<div class="container ${this.size}">\n            <div class="card" num=${this.arr[t]}>\n              <div class="front ${this.url}"></div>\n              <div class="back"><img src="images/fish${this.arr[t]}.png"</div>\n            </div>\n          </div>`,this.arr.splice(t,1),e-=1}}handle(){i.addEventListener("click",e=>{let t=e.target;for(;t!==i;){if(t.classList.contains("card"))return 2!==this.count&&(t.classList.add("flipped"),this.count=this.count+1,1===this.count&&(this.current=t),t===this.current&&(this.count=1),void(2===this.count&&(this.current.getAttribute("num")===t.getAttribute("num")?setTimeout(()=>{this.current.classList.add("hideout"),t.classList.add("hideout"),this.point=this.point-2,this.count=0,0===this.point&&this.win()},500):setTimeout(()=>{this.current.classList.remove("flipped"),t.classList.remove("flipped"),this.count=0},1e3))));t=t.parentNode}})}cleanUp(){i.innerHTML=""}win(){i.classList.remove("wrapper"),i.innerHTML='<h2 class="win_title">You win!</h2>',clearInterval(interval);let e=[localStorage.name,minute+":"+second,60*minute+second,this.number];top10.push(e);let t=this.number,n=top10.filter(function(e){return e[3]==t});n.sort(function(e,t){return e[2]>t[2]?1:-1}),n=n.slice(0,10);let r=top10.filter(function(e){return e[3]!==t});top10=r.concat(n),localStorage.top10=JSON.stringify(top10),drawTop10(t)}init(){this.choice(),this.build(),this.handle()}}let s,l=0,c=0,o=document.querySelector(".timer"),a=0,u=0,d={},m=[];function h(){document.getElementById("game-window").classList.toggle("hide")}function p(){document.getElementById("welcome-part").classList.toggle("hide")}function f(e){let t=document.createElement("div");t.className="errorMessage";let n=document.createTextNode(e);t.appendChild(n),document.querySelector("div .rules").appendChild(t),setTimeout(function(){t.parentNode.removeChild(t)},1e3)}document.getElementById("startGameBtn").addEventListener("click",function(e){if(e.preventDefault(),!function(){if(""==document.getElementById("name").value)return f("empty name"),!1;if(localStorage.name=document.getElementById("name").value,""==document.getElementById("lastName").value)return f("empty last name"),!1;if(localStorage.lastName=document.getElementById("lastName").value,""==document.getElementById("email").value)return f("empty email"),!1;localStorage.email=document.getElementById("email").value;let e=0;return document.querySelectorAll(".radio").forEach(function(t){t.checked&&(e=1,u=t.value)}),0==e?(f("level not selected"),!1):(e=0,document.querySelectorAll(".radioShirt").forEach(function(t){t.checked&&(e=1,a=t.value)}),0!=e||(f("shirt not selected"),!1))}())return;p(),h(),s=setInterval(function(){o.innerHTML=c+" mins "+l+" secs",60==++l&&(c++,l=0),60==c&&(hour++,c=0)},1e3),(d=new r(Number.parseInt(u),Number.parseInt(a))).init()}),document.getElementById("stopGameBtn").addEventListener("click",function(){h(),p(),clearInterval(s),l=0,c=0,o.innerHTML=c+" mins "+l+" secs",d.cleanUp()}),void 0===localStorage.top10&&(localStorage.top10=JSON.stringify(m)),m=JSON.parse(localStorage.top10),function(e){let t=document.querySelector(".results");t.innerHTML="";let n=JSON.parse(localStorage.top10);n=n.filter(function(t){return t[3]==e});for(let e=0;e<10;e++){let i=document.createElement("p");0!=n.length&&(i.innerHTML=e+1+".................."+n[e][0]+"................."+n[e][1]+"................."+function(e){switch(e){case 10:return"low";case 18:return"medium";case 24:return"high"}}(n[e][3])+"................."),t.appendChild(i)}}(10),h()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,